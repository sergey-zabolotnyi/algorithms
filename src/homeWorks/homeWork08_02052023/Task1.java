package homeWorks.homeWork08_02052023;

public class Task1 {
    // Дано прямоугольное поле размером n*m клеток. Можно совершать шаги длиной в одну клетку вправо или вниз.
    // Посчитать, сколькими способами можно попасть из левой верхней клетки в правую нижнюю.
    // Попробуйте решить задачу методом динамического программирования. Подсказка: Начать рассуждение можно так:
    // "В некоторую клетку с координатами (i,j) можно прийти только сверху или слева, то есть из клеток с координатами
    // (i – 1, j) и (i, j – 1). Таким образом, для клетки (i, j) число маршрутов A[i][j] будет равно
    // A[i – 1][j] + A[i][j – 1], то есть задача сводится к двум подзадачам.".

    public static void main(String[] args) {
        int n = 2, m = 3;
        int a = 4, b = 5;
        int c = 5, d = 6;

        System.out.println(countRoute(n, m)); // выведет 3
        System.out.println(countRoute(a, b)); // выведет 35
        System.out.println(countRoute(c, d)); // выведет 126

    }
    public static int countRoute (int n, int m) {
        int[][] A = new int[n+1][m+1];
        A[1][1] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (i == 1 || j == 1) {
                    A[i][j] = 1;
                } else {
                    A[i][j] = A[i-1][j] + A[i][j-1];
                }
            }
        }
        return A[n][m];
    }
}
